<%
const { modelTypes, utils, config } = it;
const { formatDescription, require, _, Ts } = utils;


const dataContractTemplates = {
  enum: (contract) => {
    const getValidContent = () => contract.content.replace(/= null/gi, '= "null"')
    
    return `enum ${contract.name} {\r\n${getValidContent()} \r\n }`;
  },

  interface: (contract) => {
    const getValidContent = () => {
      let content = contract.content;

      content = content.replace(/\| BlankEnum/gi, '');
      content = content.replace(/\| NullEnum/gi, '');
      content = content.replace(/File \|/gi, 'any |');
      content = content.replace(/: File,/gi, ': any,');

      if (!contract.name.endsWith('Params') && !contract.name.endsWith('Request')) { 
        content = content.replace(/\?/gi, '');
      }

      return content;
    }

    return `interface ${contract.name} {\r\n${getValidContent()}}`;
  },

  type: (contract) => {
    if (contract.name === 'NullEnum') return `type ${contract.name} = null;`;
    if (contract.name === 'BlankEnum') return `type ${contract.name} = null;`;
    return `type ${contract.name} = ${contract.content};`;
  },
}
%>

<% if (config.internalTemplateOptions.addUtilRequiredKeysType) { %>
type <%~ config.Ts.CodeGenKeyword.UtilRequiredKeys %><T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>
<% } %>

<% modelTypes.forEach((contract) => { %>
  <%~ includeFile('./data-contract-jsdoc.ejs', { ...it, data: { ...contract, ...contract.typeData } }) %>
  export <%~ (dataContractTemplates[contract.typeIdentifier] || dataContractTemplates.type)(contract) %>
<% }) %>
